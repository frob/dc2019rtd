---
  meta:
    title: Real Time Drupal, or how I learned to stop worrying and love Elixir.
    purpose: To show people the value of Phoenix and give them the tools to get started.
    author: Frank Robert Anderson
  outline:
    - prepatory
      - title
      - introduction
      - clairty slide
      - disclosure
      - outline
    - body
      - demo| Scarry, start with the demo. Priciple, show the cool thing first.
        - Drupal backed chat
        - Phoenix backed Drupal Real-time comments
      - How does <insert thing> work?
        - Phoenix feature walkthrough
          - Channels | websockets
            - The connection from client to server
          - HTTP/2 | push only, browsers don't support stateful connections
            - templates support pushing assets
          - generator | mix plugins
            - helps you understand what to do and where to put things
          - live reloading
          - built in test
            - this means that it is built with the idea that there will be tests and test drivin development
          - web segregation
            - What is an app
          - What is so special here? | https://youtu.be/bk3icU8iIto?t=680
      - technology| High level
        - BEAM walkthrough
          - Erlang
            - 30 year old from Ericson
            - Erlang is good for communication at massive scale
              - Turns out that telephone switches are analagous to the web
              - https://youtu.be/bk3icU8iIto?t=779
            - Code can be deployed to a running server (code deltas)
              - The phones cannot be brought down for any reason
          - Processes and messages
            - the vm works like an operating system
            - automatically distributes processes across cpu and cores
            - process is cheap (around 1k) and has own garbage collection
            - one process doesn't block another
            - If a process dies, that is okay it's isolated, you can bring it back,
              - Have you tried turning it off and on again
              - https://youtu.be/bk3icU8iIto?t=939
          - concurancy
            - async isn't concurancy
            - WhatsApp 2 million on one node less than 20 people
            - Bleacher Report
              - from few minutes for a push
              - 150 aws instances with lots of caching
              - after 10-30ms response for push
              - 30 aws instances with no caching
            - RiotGames
          - Performance
            - WhatsApp 2 mill was Erlang
            - Bleacher Report was Pure Elixir
            - Phoenix 2 mill on a heafty server 40 cores 128GB ram
              - As benchmarked with 40 machines opening connectsions at 40/s to send wikipedia articles to eachother
          - OTP
          - Plug/Cowboy
          - Ecto
            - Pool
          - remote_console
          - observer
        - Why not Erlang
        - Software Economics and Function Point Metrics
          - https://www.youtube.com/watch?v=1e2_NXLxi-E
      - architechture| How can we use this?
        - Easiest - Drupal as Drupal and Phoenix as Phoenix, include phoenix.js
          - Drupal, PHP, Maria, Nginx/Apache for HTTP/S
          - Phoenix, Postgres, Cowboy for WS
        - Easy - Drupal as Drupal, Phoenix as webserver/ESI
          - Drupal, PHP, Maria, Nginx/Apache for content management
          - Phoenix, Cowboy for application serving HTTP/S and WS
        - Hard - Drupal as CGI, Phoenix as webserver/ESI
          - Drupal, PHP, Maria for content management com via FastCGI
          - Phoenix, Cowboy for app serving
      - tips| How to talk Elixir
        - Sytax
          - iex
          - mix
            - https://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html
            - This is the built in build tool for elixir, liken to npm or composer
            - But with other generators built in
              - Think Drupal console and composer mixed together and fully supported as native parts of the language
          - rebar
            - Kind of like mix, but for Erlang.
            - Technically Rebar3
          - unit tests
            - ExUnit - built in unit test framework
          - Hex Packages
            - documentation
              - https://hexdocs.pm/
              - Hexdocs is a place for hex packages to host their documentation
          - https://www.youtube.com/watch?v=pBNOavRoNL0
            - 16:06 Decision Making
            - 13:30 Comparison
              - Data is typed
                - int vs float
                  - ``` 7 == 7.0``` => true
                  - ``` 7 === 7.0``` => false
              - and the rest
                - "> < <= >="
                - and or NOT && ||
              - if age >= 18 do \
                  "can vote" \
                else
                  "cannot vote"
                end
              - unless age === 18 do
                  "You are 18"
                else
                end
              - switch like statements
                - case some_variable do
                    1 -> "something"
                    2 -> "something else"
                    3 -> "something completely different"
                  end
                - Cond is useful for checking across many different statments
                - cond do
                    age >= 18 -> "can vote"
                    age >= 16 -> "can drive"
                    age >= 14 -> "cannot drive"
                    true -> "default"
                  end
              - Ternatry
                - Just an if/else on one line
            - 03:50 Data Types
              - is_int
                - no maximum size
              - is_float
              - is_atom
                - ``` Atom \#{is_atom(:Drupal)}```
                - ``` Atom \#{is_atom(:"Drupal dot Org")}```
              - ranges
                ``` one_to_ten 1..10```
            - 06:38 Strings
              - double quotes ``` string = "Hello World!"```
              - String Length ``` String.length("Hello World!") ``` => 12
              - String concatination ``` "Hello" <> " " <> "World!"" ```
              - String search ``` String.contains?("foobar", "foo") ``` => true
              - String first char ``` String.first("foobar") ``` => "f"
              - String char at index ``` String.at("foobar", 3) ``` => "b"
              - String substring ``` String.slice("foobar", 3, 5) ``` => "bar"
              - String explode ``` String.split("foobar", "b") ``` => ["foo", "oo"]
              - String explode ``` String.revers("foobar", "b") ``` => ["foo", "oo"]
              - String explode ``` String.upcase("foobar", "b") ``` => ["foo", "oo"]
              - String explode ``` String.downcase("foobar", "b") ``` => ["foo", "oo"]
              - String explode ``` String.capitalize("foobar", "b") ``` => ["foo", "oo"]
            - 12:44 Math
              - + - * /
              - integer division
                - ```div(5, 4)``` => 1
                - ```rem(5, 4)``` => 1
            - 23:15 Tuples
              - 2 to 4 values
              - not for enumerating, cannot use as a list
              - ``` is_tuple({1, 3.14, :Drupal}) ``` => true
              - append ```new_tuple = Tuple.append(old_tuple, 66) ```
              - get element ```el = elem(some_tuple, 2) ```
              - delete element ```new_tuple = Tuple.delete_at(old_tuple, 2) ```
              - insert element ```new_tuple = Tuple.insert_at(old_tuple, 2, "foobar") ```
              - get size ```new_tuple = tuple_size(old_tuple) ``` => 3
              - bunch of elements ``` eleven_nines = Tuple.duplicate(9, 11)```
              - ``` {name, quest, color} = {"Robin", "To find the holy grail", "red, no blue"}```
              - ``` IO.puts("favorite \#{color}")``` => "red, no blue"
            - 36:40 Maps
              - Like dictionaries
                - ``` map = %{"key" => "value", "key2" => "value2"}```
            - 28:16 Lists
              - List.insert_at
              - List.delete_at
              - List.first
              - List.last
              - list concatination ```[1,2,3] ++ [4,5,6]```
              - list subtraction ```list3 = list1 -- list2```
              - search
                - if 4 in list3 do end
              - A list can also be a key value pair with tuples.
                - ``` list = [{name:} "Robin", {quest:} "To find the holy grail"] ```
                - remove the curly braces
              - ```[1,2,3]```
              - first and everything lese
                - ```[head | tail] = list1``` => 1, [2, 3]
              - Enumerate through list
                - ``` Enum.each ["words", "in", "list"], fn word ->
                        IO.puts word
                      end
                  ```
            - 39:33 Pattern Matching
              - In Elixir the = isn't about assignment event though that seems to happen
              - Assignment is about assigning a memory location to a value and that isn't what is happening
              - the = is actually the match operator and it allows us to define matching rules
              - For example
                - ```foo = "bar"```
                - ```{a, b, c} = {:hello, "world", 42}```
                - ```a == :hello``` => true
                - ```{a, b, c} = {:hello, "world"}```
                  - Causes a match error, The Tuples are of different lengths
            - Mod.fun/arity
              - module
                - no classes only module namespaces
              - functions are in the defined in the namespace with def
              - arity is the number of arguments a function has
                - You will see error messages that say things like
                  - No function defined foo/2
                  - Meaning that somewhere foo(a, b) is getting called and it hasn't been defined
              - function
                - https://blog.carbonfive.com/2017/10/19/pattern-matching-in-elixir-five-things-to-remember/
                  - Multi-Clause Functions
                    - https://gist.github.com/aneyzberg/5cec0f73c6454e5ad0255b0538d650ed/raw/574d4731ec0a59b4827e3a4c65ab93d61a77c0ad/pattern-matching-9.md
                - How many people here are familiar with Drupal 7 and hook based development?
                  - remember how we would do this?
                    - ``` function example_login_form_form_alter($form, $form_state) ```
                  - Pattern matching makes this a part of the language in an interesting way.
                    - https://youtu.be/gom6nEvtl3U?t=1159
                    - you don't need to use switch or if as much for branching
                  - So (hook alter example) becomes
                    - ``` def hook_alter(form_id = 'login_form', form, _form_state) ```
                - underscores in front of arguments are ignored by compiler
                - default values with double backslash \\
                  - ``` def somefunc(foo \\ "bar") do
                          IO.puts foo
                        end```
            - 41:01 Anonymous Functions
              - normal syntax, should be familiar
                - ```add_things = fn (a, b) -> a + b end```
              - short syntax
                - ```add_things = &(&1 + &2)```
              - one function many definitions
                - ``` add_things = fn
                        {a, b} -> a + b
                        {a, b, c} -> a + b + c
                      end```
                - ```add_things.({1, 2})
            - 45:52 Recursion
              - ``` def print_list([element|list]) do
                      IO.puts element
                      print_list(list)
                    end
                      def print_list([]), {do:} nil
                      remove the curly brackets
                ```
            - 48:48 Looping
              - There is no looping, You will need to use recursion or Enumerables
            - 53:05 Enumerables
              - Enum.each
              - Enum.map
              - Enum.reduce([], fn)
              - Enum.uniq([])
            - 58:19 List Comprehensions
            - 1:01:21 Concurrency
              - spawn(fn() -> do_stuff("foobar") end)
              - send(self(), {:greeting, "Robin"})
              - recieve do
                  {:greeting, name} -> IO.puts "Hello \#{name}"
                  {:farewell, name} -> IO.puts "Goodbye \#{name}"
                after
                  500 -> IO.puts "I didn't want to talk to you anyway!"
                end
          - pipes
            - https://youtu.be/gom6nEvtl3U?t=1308
            - wraps the paramaters to wrapping functions
            - so ```$array = reset(array_keys($old_array)) ```
              - would become ```$old_array |> array_keys, reset ```
        - Features
          - OTP
            - Open Telecom Platform
            - gives us supervision trees, event managers, and other goodness.
            - Basically all of the Erlang Platform.
          - GenServer
            - PID
            - cast
            - each process has a mailbox
            - think of it like microservives
            - Let it die
              - don't worry about error handling
              - BEAM cannot segfault
          - Supervisors
            - reboots the worker processes
            - processes started by supervisores aren't called by pid, but insteadh machinname
            - Agents can be used to save state
          - Phoenix
            - Framework build on Elixir
            - app vs app_web | seperate the frontend code from the web frontent
            - context | Dedicated modules that expose related functionallity
          - Meta-programming
            - This is what many of the features of Elixir that I just talked about is built on. It is a way to add syntactical sugar without changing the whole language.
    - conclusion
      - reenforcement
      - conclusion
        - There has been little actual gain with sharing code between front and back-end
        - Why I gave the talk
          - The goal
          - The why, because there is so much more out there.
            - Drupal 8 got us off the island by addopting composer
            - Drupal is fine, it exists well within the php landscape
              - We need to get off our php planet
              - If Drupal is going to continue to get good we need to know what else is going on
      - Live View
        - Last year, I wasn't planning on giving a talk at DrupalCon this year
        - I figured you all had heard enough from me two years in a row
        - Then I went to ElixirCon and I saw this
          - Demo some Phoenix LiveView
        - This has the potential to change everything about how a web app is expected to work
          - This got me excited
          - This is events in the browser causing things to happen on the server without a full http request and without isomorphic front/backend javascript
          - This is like the first time getting Drupal's ajax form api to work as expected
          - This is running on my machine right now
          - play snake
        - HTTP/2 and WS isn't the best sollution for everything
          - a website can just be a website
          - But Drupal's market position isn't in just a website
          - Drupal is for interesting web-apps

      - sprint slide
      - apendex
        - https://www.youtube.com/watch?v=OsEEsxIrtsQ&t=460s
        - https://www.youtube.com/watch?v=gom6nEvtl3U


  slides:
  # Prepatory.
    - title:
      file: title.md
    - introduction:
      file: introduction.md
    - clarity slide:
      file: clarity-slide.md
    - disclosure:
      file: disclosure.md

  # Body.
    - cool stuff:
      file: cool-stuff.md
    - outline:
      file: outline.md
    - how it works:
      file: howitworks.md
    - technology high level:
      file: technologyhighlevel.md
    - architechture:
      file: architechture.md
    - tips:
      file: tips.md

  # Conclusion.
    - reenforcement slide:
      file: reenforcement.md
    - conclusion:
      file: conclusion.md
    - live:
      file: live.md
    - sprint:
      file: sprint.md
    - feedback:
      file: feedback.md
    - appendex:
      file: appendex.md











#
#   - the future:
#     - leader boards
#     - make sure the same thing doesn't happen twice
#     - thing generation
#     - thing grading
#     - web frontend (trueornot)
